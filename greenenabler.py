# -*- coding: utf-8 -*-
"""GreenEnabler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mSbj0qH2n_yDjEwcVZ33XoSDv03dIk5O

## Importing Libraries & Data
"""

from google.colab import drive
drive.mount('/content/drive')

#General imports:
import pandas as pd
import numpy as np, array
import seaborn as sns
import re, os
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter(action="ignore")

#keras
from keras.preprocessing.text import one_hot
from keras_preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers.core import Activation, Dropout, Dense
from keras.layers import Flatten
from keras.layers import GlobalMaxPooling1D, GlobalMaxPooling2D
from tensorflow.python.keras.layers.embeddings import Embedding
from keras.preprocessing.text import Tokenizer
from keras.layers.convolutional import Conv1D, Conv2D
from keras.models import Sequential
from keras.initializers import Constant
from tensorflow.keras.optimizers import Adam
from keras.layers import LSTM
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.optimizers import RMSprop

from keras.models import Model
from keras.layers import Input, Embedding, Dense, Conv2D, MaxPool2D
from keras.layers import Reshape, Flatten, Concatenate, Dropout, SpatialDropout1D
from keras.preprocessing import text, sequence
from keras.callbacks import Callback

#sklearn
from sklearn.utils import shuffle
from sklearn.metrics import accuracy_score, balanced_accuracy_score, roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.decomposition import PCA, TruncatedSVD

#NLTK
import nltk
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('punkt')
from nltk import wordnet
from nltk.corpus import stopwords
from nltk import PorterStemmer, WordNetLemmatizer
from textblob import Word
from nltk.tokenize import sent_tokenize, word_tokenize

# Importing Models
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import MultinomialNB,ComplementNB,BernoulliNB,CategoricalNB
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier
from xgboost.sklearn import XGBClassifier
from sklearn.svm import SVC

# Importing Evaluation matrces
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,confusion_matrix,classification_report, plot_confusion_matrix

path = r"/content/drive/MyDrive/Datasets/GreenEnabler.csv"
GreenEnabler = pd.read_csv(path)
print(GreenEnabler.shape)

"""##Feature Impotrtance"""

corr = GreenEnabler.corrwith(GreenEnabler['route'])
corr = corr.sort_values(ascending=False)
corr[:20]

import sklearn
from sklearn import feature_selection
from sklearn.feature_selection import SelectKBest, f_classif
X = GreenEnabler.drop('route',axis=1)
y = GreenEnabler['route']

# Create and fit selector
selector = SelectKBest(f_classif, k=10)
selector.fit(X, y)

# Get columns to keep and create new dataframe with those only
cols = selector.get_support(indices=True)
selected = X.iloc[:,cols]
selected['route'] = GreenEnabler.route
selected

"""#SMOTE"""

from sklearn.utils import shuffle
selected = shuffle(selected)

X = selected.drop(['route'], axis=1)#.values
y = selected['route']#.values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44)
X_train.shape, y_train.shape, X_test.shape, y_test.shape

from sklearn.utils import shuffle
#X_train = shuffle(X_train)

from sklearn.manifold import TSNE
import plotly.express as px

viz = X_train.sample(1000)#values

tsne = TSNE()
projections = tsne.fit_transform(viz)
fig = px.scatter(
    projections, x=0, y=1#,
    #color=y_train, labels={'color': 'class'}
)
fig.show()

from sklearn.manifold import TSNE
import plotly.express as px

viz = X_train.values

tsne = TSNE(n_components=2, random_state=0)
projections = tsne.fit_transform(viz)
fig = px.scatter(
    projections, x=0, y=1,
    color=y_train, labels={'color': 'class'}
)
fig.show()

print(X_train.shape)
print(y_train.value_counts())

from imblearn.over_sampling import SMOTE
sampler = SMOTE()
X_train, y_train = sampler.fit_resample(X_train, y_train)

print(X_train.shape)
print(y_train.value_counts())

viz = X_train.values

tsne = TSNE(n_components=2, random_state=0)
projections = tsne.fit_transform(viz)
fig = px.scatter(
    projections, x=0, y=1,
    color=y_train, labels={'color': 'class'}
)
fig.show()

viz = X_train.values

fig = px.scatter(
    viz, x=0, y=1,
    color=y_train, labels={'color': 'class'}
)
fig.show()

"""# Machine learning"""

# check the performance on diffrent regressor
models = []
models.append(('LogisitcRegression', LogisticRegression()))
models.append(('LogisitcRegression1', LogisticRegression(class_weight='balanced')))
models.append(('LogisitcRegression1', LogisticRegression(class_weight = {0: 1, 1: 100})))

models.append(('MultinomialNB', MultinomialNB()))
#models.append(('MultinomialNB', MultinomialNB(class_prior ='balanced')))
#models.append(('MultinomialNB', MultinomialNB(class__log_prior=[0.25, 0.5])))

models.append(('ComplementNB', ComplementNB()))

#models.append(('BernoulliNB', BernoulliNB()))

#models.append(('CategoricalNB', CategoricalNB()))

models.append(('RandomForestClassifier', RandomForestClassifier()))
models.append(('RandomForestClassifier1', RandomForestClassifier(class_weight='balanced')))

models.append(('MLPClassifier', MLPClassifier()))

models.append(('KNeighborsClassifier', KNeighborsClassifier()))

models.append(('ExtraTreesClassifier', ExtraTreesClassifier()))
models.append(('ExtraTreesClassifier1', ExtraTreesClassifier(n_estimators=100, max_depth=2,random_state=0, class_weight='balanced')))

models.append(('XGBClassifier', XGBClassifier()))
models.append(('XGBClassifier1', XGBClassifier(n_estimators=100, max_depth=2,random_state=0,class_weight='balanced')))

models.append(('SVC', SVC()))
models.append(('SVC', SVC(class_weight='balanced')))

"""##Shallow models"""

# metrices to store performance
acc = []
pre = []
f1 = []
con = []
rec = []


import time
i = 0
for name,model in models:
    i = i+1
    start_time = time.time()

    # Fitting model to the Training set
    clf = model
    clf.fit(X_train, y_train)

    # predict values
    y_pred = clf.predict(X_test)

    # Confusion Matrix
    confusion_mat = confusion_matrix(y_test, y_pred)
    con.append(confusion_mat)
    # Report
    report = classification_report(y_test, y_pred)



    print("+","="*50,"+")
    print(name)
    print(confusion_mat)
    print(report)
    print("-"*10)
    #print('Plotting Confusion Matrix...\n')
    #plot_confusion_matrix(clf, X_test, y_test)
    #plt.show()
    print(f"Time for detection: {round((time.time() - start_time), 3)} seconds")

#Grid Search
from sklearn.model_selection import GridSearchCV
clf = LogisticRegression()
grid_values = {'penalty': ['l1', 'l2', 'elasticnet', 'none'],
               #default='l2' Specify the norm of the penalty:
               #'none': no penalty is added;
               #'l2': add a L2 penalty term and it is the default choice;
               #'l1': add a L1 penalty term;
               #'elasticnet': both L1 and L2 penalty terms are added.

               'C':[0.001,.009,0.01,.09,1,5,10,25],
               #C : float, default=1.0
               #Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization.

               'max_iter':[100,200],

               'dual':[False,True],
               #dual : bool, default=False
                #Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.

               'tol':[0.0001],
               #tol : float, default=1e-4
               #Tolerance for stopping criteria.

               'fit_intercept':[True,False],
               #fit_intercept : bool, default=True
               #Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function.

               'intercept_scaling':[1,2,3],
               #intercept_scaling : float, default=1
               #Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True.
               #In this case, x becomes [x, self.intercept_scaling], i.e. a "synthetic" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes intercept_scaling * synthetic_feature_weight.
               #Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.

               'class_weight':[None,'balanced'],
               #class_weight : dict or 'balanced', default=None
               #Weights associated with classes in the form {class_label: weight}. If not given, all classes are supposed to have weight one.
               #The "balanced" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y)).
               #Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.

               'random_state':[None,1],
               #random_state : int, RandomState instance, default=None
               #Used when solver == 'sag', 'saga' or 'liblinear' to shuffle the data. See Glossary <random_state> for details.

               'solver':['lbfgs','newton-cg','liblinear','sag','saga'],
               # default='lbfgs'
               #Algorithm to use in the optimization problem. Default is 'lbfgs'. To choose a solver, you might want to consider the following aspects:
               #- For small datasets, 'liblinear' is a good choice, whereas 'sag' and 'saga' are faster for large ones; - For multiclass problems,
               # only 'newton-cg', 'sag', 'saga' and 'lbfgs' handle multinomial loss; - 'liblinear' is limited to one-versus-rest schemes.

               'max_iter':[100],
               #max_iter : int, default=100
               #Maximum number of iterations taken for the solvers to converge.

               'multi_class':['auto'],
               # multi_class : {'auto', 'ovr', 'multinomial'}, default='auto'
               #If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across
               #the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.

               'verbose':[0,5,10],
               #verbose : int, default=0
               #For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.

               'warm_start':[False,True],
               #warm_start : bool, default=False
               #When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver. See the Glossary <warm_start>.

               'n_jobs':[None],
               #n_jobs : int, default=None
               #Number of CPU cores used when parallelizing over classes if multi_class='ovr'". This parameter is ignored when the solver is set to 'liblinear' regardless of whether 'multi_class' is specified or not. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary <n_jobs> for more details.

               'l1_ratio':[None]
               #l1_ratio : float, default=None
               #The Elastic-Net mixing parameter, with 0 <= l1_ratio <= 1. Only used if penalty='elasticnet'. Setting l1_ratio=0 is equivalent to using penalty='l2', while setting l1_ratio=1 is equivalent to using penalty='l1'. For 0 < l1_ratio <1, the penalty is a combination of L1 and L2.

               }

grid_clf_acc = GridSearchCV(clf, param_grid = grid_values,scoring = 'balanced_accuracy')
grid_clf_acc.fit(X_train, y_train)

#Predict values based on new parameters
y_pred_acc = grid_clf_acc.predict(X_test)

#Logistic Regression (Grid Search) Confusion matrix
print(confusion_matrix(y_test,y_pred_acc))
print(classification_report(y_test,y_pred_acc))
print(grid_clf_acc.best_params_)
print(f"Time for detection: {round((time.time() - start_time), 3)} seconds")

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()

grid_values = {'n_estimators': [10, 30, 50, 100],
               'max_features': ['sqrt', 0.25, 0.5, 0.75, 1.0],
               'max_depth' : [4,5,6,7,8],
              }

grid_search_rfc = GridSearchCV(rfc, param_grid = grid_values, scoring = 'accuracy')
grid_search_rfc.fit(X_train, y_train)

#Predict values based on new parameters
y_pred_acc = grid_clf_acc.predict(X_test)

print(confusion_matrix(y_test,y_pred_acc))
print(classification_report(y_test,y_pred_acc))
print(grid_clf_acc.best_params_)



"""# Deep Learning"""

# Function to evaluate the model
def evaluate(model, history, X_train=X_train, X_test=X_test, y_train=y_train, y_test=y_test):
    from sklearn import metrics

    # Making predictions from model
    y_pred = [1 if i>0.5 else 0 for i in model.predict(X_test)]
    y_pred_train = [1 if i>0.5 else 0 for i in model.predict(X_train)]

    # printing all results
    print(f"roc_auc_score: {metrics.roc_auc_score(y_test, y_pred)}")
    print(f"balanced_accuracy_score: {metrics.balanced_accuracy_score(y_test, y_pred)}")

    print("-"*50)

    # Creating confusion metric of results
    cm = metrics.confusion_matrix(y_test, y_pred)

    # Classification Report
    print(metrics.confusion_matrix(y_test, y_pred))
    print(metrics.classification_report(y_test, y_pred))

    '''    plt.figure(figsize=(7, 6))
    sns.heatmap(cm, annot=True, cmap="coolwarm", cbar=False)
    plt.xlabel("True Values")
    plt.ylabel("Predicted Values")
    plt.show()'''

    # Losses
    print("\n", '-'*50)
    plt.plot(history.history['acc'])
    plt.plot(history.history['val_acc'])

    plt.title('val_acc')
    plt.ylabel('accuracy')
    plt.xlabel('epoch')
    plt.legend(['train','test'], loc='upper left')
    plt.show()

    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])

    plt.title('val_loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train','test'], loc='upper left')
    plt.show()

import tensorflow as tf

def get_model(n_l1, optimizer, lr):
  model = Sequential()
  embedding_layer = Embedding(vocab_size, 100, input_length=X_train.shape[1], trainable=True,weights=[embedding_matrix])
  model.add(embedding_layer)
  model.add(Flatten())
  model.add(Dense(n_l1, activation='relu'))
  model.add(Dense(50, activation='relu'))
  model.add(Dense(10, activation='relu'))
  model.add(Dense(1, activation='sigmoid'))

  if optimizer=="adam":
    optimizer=tf.keras.optimizers.Adam(learning_rate=lr)
  elif optimizer=="RMSprop":
    optimizer=tf.keras.optimizers.RMSprop(learning_rate=lr)

  model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['acc'])
  return model

def optimize(trial, X, y):
  n_l1 = trial.suggest_int("n_l1", 50, 200)   # the number of neurones for layer 1 in the model. min=50 and max=200
  optimizer = trial.suggest_categorical("optimizer", ["adam", "RMSprop"])
  epochs = trial.suggest_int("epochs", 2, 10)
  lr = trial.suggest_uniform("lr", 1e-5, 1e-1)

  model = get_model(n_l1, optimizer, lr)
  model.fit(X_train, y_train, batch_size=32, epochs=epochs, verbose=0, validation_split=0.2)

  y_pred = [1 if i>0.5 else 0 for i in model.predict(X_test)]
  print(metrics.classification_report(y_test, y_pred))
  return metrics.recall_score(y_true=y_test, y_pred = y_pred, average="macro").round(2)

optimization_function = partial(optimize, X=X_train, y=y_train)
study = optuna.create_study(direction="maximize")
study.optimize(optimization_function, n_trials=10)
print('************')
print(study.best_trial)
print('************')
list_values = []
for trial in study.trials:
  params = trial.params
  params.update({"score":trial.value})
  list_values.append(params)
pd.DataFrame(list_values).sort_values(by=['score','epochs'], ascending=[False,True])

def objective(trial):
    x = trial.suggest_float("x", 0, 5)
    y = trial.suggest_float("y", 0, 3)

    v0 = 4 * x ** 2 + 4 * y ** 2
    v1 = (x - 5) ** 2 + (y - 5) ** 2
    return v0, v1


study = optuna.create_study(directions=["minimize", "minimize"])
study.optimize(objective, n_trials=50)

fig = optuna.visualization.plot_pareto_front(study)
fig.show()

import optuna


def objective(trial):
    x = trial.suggest_float("x", -100, 100)
    y = trial.suggest_categorical("y", [-1, 0, 1])
    return x ** 2 + y


sampler = optuna.samplers.TPESampler(seed=1000)
study = optuna.create_study(sampler=sampler)
study.optimize(objective, n_trials=10)

fig = optuna.visualization.plot_slice(study, params=["x", "y"])
fig.show()

def objective(trial):
    lr = trial.suggest_float("lr", 1e-5, 1e-1)
    epoch = trial.suggest_categorical("epoch", [3, 4, 5,10])
    opt = trial.suggest_int("opt", 1, 2)

    return lr ** 2 + epoch + opt


sampler = optuna.samplers.TPESampler(seed=100)
study = optuna.create_study(sampler=sampler)
study.optimize(objective, n_trials=100)

fig = optuna.visualization.plot_parallel_coordinate(study, params=["lr", "epoch","opt"])
fig.show()

def f(x):
    return (x - 2) ** 2

def df(x):
    return 2 * x - 4

def objective(trial):
    lr = trial.suggest_float("lr", 1e-5, 1e-1, log=True)

    x = 3
    for step in range(200):
        y = f(x)

        trial.report(y, step=step)
        if trial.should_prune():
            raise optuna.TrialPruned()

        gy = df(x)
        x -= gy * lr

    return y


sampler = optuna.samplers.TPESampler(seed=10000)
study = optuna.create_study(sampler=sampler)
study.optimize(objective, n_trials=10)

fig = optuna.visualization.plot_intermediate_values(study)
fig.show()

model = Sequential()
embedding_layer = Embedding(vocab_size, 100, input_length=X_train.shape[1], trainable=True,weights=[embedding_matrix]) #weights=[embedding_matrix]
model.add(embedding_layer)

model.add(Flatten())
model.add(Dense(12, input_dim=X_train.shape[1], activation='sigmoid'))
model.add(Dense(12, activation='sigmoid'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])

print(model.summary())

history = model.fit(X_train, y_train, batch_size=32, epochs=5, verbose=1, validation_split=0.2)
evaluate(model, history)

model = Sequential()
embedding_layer = Embedding(vocab_size, 100, input_length=X_train.shape[1], trainable=True,weights=[embedding_matrix]) #weights=[embedding_matrix]
model.add(embedding_layer)
model.add(Flatten())
model.add(Dense(100, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])

print(model.summary())

history = model.fit(X_train, y_train, batch_size=32, epochs=10, verbose=1, validation_split=0.2) #class_weight = {0: 1, 1: 100}
evaluate(model, history)

history = model.fit(X_train, y_train, batch_size=32, epochs=5, verbose=1, validation_split=0.2) #class_weight = {0: 1, 1: 100}
evaluate(model, history)

history = model.fit(X_train, y_train, batch_size=32, epochs=5, verbose=1, validation_split=0.2) #class_weight = {0: 1, 1: 100}
evaluate(model, history)

history = model.fit(X_train, y_train, batch_size=32, epochs=5, verbose=1, validation_split=0.2) #class_weight = {0: 1, 1: 100}
evaluate(model, history)

model = Sequential()
embedding_layer = Embedding(vocab_size, 100, input_length=X_train.shape[1], trainable=True,weights=[embedding_matrix]) #weights=[embedding_matrix]
model.add(embedding_layer)
model.add(Flatten())
model.add(Dense(100, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])

print(model.summary())

history = model.fit(X_train, y_train, batch_size=32, epochs=10, verbose=1, validation_split=0.2,class_weight = {0: 1, 1: 13}) #class_weight = {0: 1, 1: 100}
evaluate(model, history)

history = model.fit(X_train, y_train, batch_size=32, epochs=5, verbose=1, validation_split=0.2,class_weight = {0: 1, 1: 3}) #class_weight = {0: 1, 1: 100}
evaluate(model, history)

#np.random.seed(42)
model = Sequential()
embedding_layer = Embedding(vocab_size, 100, input_length=X_train.shape[1], trainable=True) #weights=[embedding_matrix]
model.add(embedding_layer)
model.add(Flatten())
model.add(Dense(100, activation='tanh'))
model.add(Dropout(0.3))
model.add(Dense(50, activation='tanh'))
model.add(Dropout(0.2))
model.add(Dense(10, activation='tanh'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='sgd', loss='binary_crossentropy', metrics=['acc'])

print(model.summary())

history = model.fit(X_train, y_train, batch_size=32, epochs=5, verbose=1, validation_split=0.2,class_weight = {0: 1, 1: 2}) #class_weight = {0: 1, 1: 100}
evaluate(model, history)

history = model.fit(X_train, y_train, batch_size=32, epochs=10, verbose=1, validation_split=0.2,class_weight = {0: 1, 1: 3}) #class_weight = {0: 1, 1: 100}
evaluate(model, history)